<?xml version="1.0" encoding="iso-8859-1"?><?xml-stylesheet type="text/xsl" href="ieHack.xsl"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head><title>uriVL -- Installation and Usage</title><meta http-equiv="content-type" content="application/xhtml+xml; charset=iso-8859-1" /><meta name="description" content="How to install and use the uriVL SDK" /><meta name="keywords" content="uriVL, IDE, gcc, cmake, Xcode, Visual Studio, Eclipse" /><meta name="generator" content="Alpha X" /></head><body><p><b>Last modified:</b><br></br>&#160;&#160;&#160;		<!-- #lastmodified text="" form="abbrev,weekday,time" -->		           Wed, 11 Sep 2013 18:08		<!-- /#lastmodified --></p><h1>1. Platform Support and Dependencies</h1><h2>1.1 Platforms supported</h2><p>The different platforms and IDEs currently supported by uriVL are:</p><ul>        <li><b>Mac OS X 10.6 and 10.7-10-8 (in progress)</b>        <ul>		<li> Xcode 3.2</li>		<li> Xcode 4 (in slow, painful progress)</li>		<li> CMake with gcc</li>		    </ul></li>        <li><b>Windows XP, Vista, 7</b>        <ul>		<li> Visual Studio 8, 9, 10 (Pro or Express)</li>		<li> CMake with Visual Studio 8, 9, 10</li>		<li> CMake with MinGW</li>	    </ul>        </li>        <li><b>Linux</b>        <ul>		<li>CMake with gcc</li>	    </ul>        </li>    </ul><p>It is possible to use Eclipse as your IDE on top of the CMake buildingtree.  The demos and the library can certainly be tweaked to work withother IDEs (for a while Code::Blocks projects were a part of the SDK), butthis may take a few edits in the main header file<tt>uriBase::uriVisionLib.h</tt>.</p><h2>1.2 Different versions of the library</h2><p>There are two main versions of the library:</p><ul>    	<li>QuickTime version: This one uses Apple's QuickTime library for	internal storage, reading and writing of images, movie playing, and	access to a live camera.  This version is supported on Mac OS X and	Windows 2000 and XP. The uriVL SDK includes pre-built binaries of the	"QuickTime version of uriVL framework (for Mac OS X) and libraries (for	Windows).<br>	</br> At this point the version of QuickTime used for Mac OS X (and	obviously for Windows) is still the old Carbon library, the main	reasons for this being that QTKit still seems incomplete and buggy,	that I hate its Objective-C syntax, and that I have not time to to	master it. However, the writing is ominously on the wall, and I know	that a transition to QuickTimeX will be mandatory before too long.  I	expect work to that effect to start in Fall 2009 and be completed by	the end of Spring 2010.</li>	        <li>"Generic" version: This one uses generic C++ code for image    storage, and possibly some third-party open-source libraries for    importing and exporting media. The "generic" version of the library    should run on all platforms (subject to availability of third-party    components).  We don't distribute binaries of the "generic" version of    the library because there are simply too many possible combinations    based on which third-party libraries you may decide to use to build    uriVL.  See the rest of the documents for directions on how to build    the library.  </li>    </ul><p>There is nothing that prevents having a "Windows Media" version, except forlack of time and lack of interest in developing one (at this point).</p><h2>1.3 Build variables</h2><p>More generally, there are a bunch of environment variables that can be set to build different versions of the library.  <ahref="Development/uriVL_environmentVariables.xhtml">This page</a> gives a complete list of the environment variables used throughout uriVL.</p><h1>2. Folder Hierarchy</h1><h2>2.1 Full distribution (subversion)</h2><p>I you got uriVL through the subversion repository, then you should find thefollowing folder hierarchy in your working copy folder.</p><ul>        <li><b>uriVL</b> root folder        <ul>		<li><b>Development</b>		<ul>	    	    <li><tt>build_uriVL.xhtml</tt>: gives directions on how to	    build different versions of uriVL for your platform of	    choice</li>	    	    <li><b>Projects</b>: contains projects and scripts to build	    uriVL for different platforms</li>	    	    <li><b>Source</b>: all source files for the library	    	    <ul>				<li><b>C++</b> (because at some point we had plans for Java wrappers):		all .cpp files</li>			    </ul>	    	    </li>	    	</ul>		</li>		<li><b>Documentation</b>		<ul>	    	    <li><b>doxygen</b>: contains doxygen configuration files to	    produce the documentation from the header files</li>	    	</ul>		</li>		<li><b>SDK</b>		<ul>	    	    <li><b>Headers</b>: C++ headers for all classes in the	    library</li>	    	    <li><b>Libraries</b>: Where the uriVL library or framework is	    built.</li>	    	    <li><b>Demos</b>: Contains all the sample code for uriVL,	    organized into categories.	    	    <ul>				<li><tt>demos_readMe.xhtml</tt> lists all demos and reports		their status for the different development platforms.</li>				<li><b>C++</b> (should be renamed): Contains all individual		demos. Each demo has its own project and can be		moved/copied out of the SDK folder hierarchy (Mac/Xcode and		Windows/Visual). </li>				<li><b>Projects</b> (should be renamed): For those who like		the "one mega-project to build all demos" approach. </li>				<li>_images: a folder containing gifs used by the demo		status report web page.</li>			    </ul>	    	    </li>	    	    <li><b>Data_Samples</b>: images, movies, and models used by the	    demos</li>	    	    <li><b>Templates</b>: Is supposed to contain template projects	    for the different IDEs supported.</li>	    	</ul>		</li>	    </ul>        </li>    </ul><h2>2.2 Pre-built SDK</h2><p>I you downloaded a pre-built version of the uriVL SDK, then you shouldhave the following folder hierarchy:</p><ul>        <li><b>uriVL</b> root folder        <ul>		<li><b>SDK</b>		<ul>	    	    <li><b>Headers</b>: C++ headers for all classes in the	    library</li>	    	    <li><b>Libraries</b>: Contains the pre-built dll or framework	    for the platform you selected	    	    <ul>				<li><b>MacOS</b>: would contain the framework		<tt>uriVL-QT.framework</tt></li>				<li><b>Windows</b>: </li>			    </ul>	    	    </li>	    	    <li><b>Demos</b>: Contains all the sample code for uriVL,	    organized into categories.	    	    <ul>				<li><tt>demos_readMe.xhtml</tt> lists all demos and reports		their status for the different development platforms.</li>				<li><b>C++</b> (should be renamed): Contains all individual		demos. Each demo has its own project and can be		moved/copied out of the SDK folder hierarchy (Mac/Xcode and		Windows/Visual). </li>				<li><b>Projects</b> (should be renamed): For those who like		the "one mega-project to build all demos" approach. </li>				<li>_images: a folder containing gifs used by the demo		status report web page.</li>			    </ul>	    	    </li>	    	    <li><b>Data_Samples</b>: images, movies, and models used by the	    demos</li>	    	    <li><b>Templates</b>: Is supposed to contain template projects	    for the different IDEs supported.</li>	    	</ul>		</li>	    </ul>        </li>    </ul><h2>2.3 API Documentation</h2><p>You can also download the uriVL API's doxygen-produced documentation as aset of html files.</p><h1>2. Where to Start</h1><h2>2.1 If you downloaded a pre-built SDK</h2><p>First check the list of settings for the different environment variables in the SDK version that you downloaded.  Consult <ahref="Development/uriVL_environmentVariables.xhtml">this page</a> for more information on these settings.</p><p>Consult the list of demos <tt>SDK/Demos/demos_readMe.xhtml</tt> and followdirections in this document to build and run demos.</p><h2>2.2 If you downloaded uriVL through subversion</h2><p>First you must build the library for your platform of choice, following thedirections provided by <tt>Development/compile_uriVL.xhtml</tt>.</p><p>Once you have built the library, consult the list of demos<tt>SDK/Demos/demos_readMe.xhtml</tt> and follow directions in thatdocument to build and run demos.</p><p><br></br></p><hr></hr><p><a href="http://validator.w3.org/"><img style="border:0;width:88px;height:31px"src="http://www.w3.org/Icons/valid-xhtml11" alt="Valid XHTML 1.1" /></a><a href="http://jigsaw.w3.org/css-validator/">        <img style="border:0;width:88px;height:31px"            src="http://jigsaw.w3.org/css-validator/images/vcss"            alt="Valid CSS!" /></a></p></body></html>