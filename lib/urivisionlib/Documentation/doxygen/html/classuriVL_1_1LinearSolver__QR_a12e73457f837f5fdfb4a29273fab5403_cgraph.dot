digraph "uriVL::LinearSolver_QR::solve"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="uriVL::LinearSolver\l_QR::solve",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node2 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="uriVL::Matrix::getNbCols",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classuriVL_1_1Matrix.html#ad31ec31b060abc8b63e04d670acc1041",tooltip="This function returns a int corresponding to the number of columns in this "];
  Node1 -> Node3 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="uriVL::Matrix::getNbRows",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classuriVL_1_1Matrix.html#a15c065f33d719d09ec6158dc46af09aa",tooltip="This function returns a int corresponding to the number of rows in this "];
  Node1 -> Node4 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="uriVL::LinearSolver\l_QR::solve_",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classuriVL_1_1LinearSolver__QR.html#a9ff202569010c3caa4ed3a03336a66f6",tooltip="Solves an SLE for the matrix and right-side term received as parameters. "];
  Node4 -> Node3 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 -> Node2 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 -> Node5 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="uriVL::Matrix::getMatrix",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classuriVL_1_1Matrix.html#a29c91cadbe9ad1e2ec93d51711348f77",tooltip="Returns a read-only pointer to the matrix data. "];
  Node4 -> Node6 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="uriVL::LinearSolver\l_QR::factorize_",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classuriVL_1_1LinearSolver__QR.html#a7d0b2a800f1765f511f2e1b3fdb85328",tooltip="Computes the QR factorization of an SLE. "];
  Node6 -> Node7 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="uriVL::LinearSolver\l_QR::computeHouseholderV_",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classuriVL_1_1LinearSolver__QR.html#a4e2db32ce003933f186a45e1e2527aaf",tooltip="Computes the Householder construction vector for a partial column of the matrix. "];
  Node4 -> Node8 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="uriVL::LinearSolver\l_QR::applyQt_",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classuriVL_1_1LinearSolver__QR.html#ab1a38a2aea73019098121823d7359cfd",tooltip="Applies the Q matrix of a QR factorization (stored under the form of Householder V vectors) to the ri..."];
  Node4 -> Node9 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="uriVL::LinearSolver\l_QR::solveBS_",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classuriVL_1_1LinearSolver__QR.html#a93e983a8fc5ca08ca0d9a0bdff0327a6",tooltip="Solves an SLE for the matrix and right-side term received as parameters. "];
}
