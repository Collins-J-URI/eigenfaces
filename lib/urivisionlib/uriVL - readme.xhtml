<?xml version="1.0" encoding="iso-8859-1"?><?xml-stylesheet type="text/xsl" href="ieHack.xsl"?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head><title>uriVL -- Objectives, History, and Organization</title><meta http-equiv="content-type" content="application/xhtml+xml; charset=iso-8859-1" /><meta name="generator" content="Alpha X" /><meta name="description" content="About uriVL" /><meta name="keywords" content="uriVL, computer vision, library, Mac OS X, Windows, Linux" /></head><body><p><b>Last modified:</b><br></br>&#160;&#160;&#160;		<!-- #lastmodified text="" form="abbrev,weekday,time" -->		           Wed, 11 Sep 2013 18:07		<!-- /#lastmodified --></p><h2>1. uriVL: the URI Vision Library</h2><h3>1.1 Objectives and scope</h3><p>uriVL is a library for processing image data provided by a video source(image reader, movie file, frame grabber).  Our goal was to develop afairly lightweight, object-oriented, thread-safe, cross-platform library.The design of the library was guided by research and development projectsof the Groupe de Recherche en Perception et Robotique at &#201;colePolytechnique de Montr&#233;al (sensor-based robotics, mining automation)and of the 3D Group for Interactive Visualization at the University ofRhode Island (augmented reality, game development).  At the time we startedworking on uriVL, OpenCV was still an Intel product (which at the timemeant no Mac support), not OOP, and seemed dormant if not dead.  The otherchoice at the time, the Image Understanding Environment (IUE), was all Cand seemed unnecessarily heavy and complex.  Since we started developing uriVL, OpenCV has sprung back to life and become fairly popular, and other projects offereing comparable functionality (e.g. Cider) have appeared.  EVen if my initial hope that uriVL could find a large user base have vanished at this point, I keep developing it to support my own projects.</p><h3>1.2 Development guidelines</h3><p>At this point the development of uriVL is very much project-driven, which results in a very uneven rate of growth for the different parts of the library.  Another driving force behind the development of the library is teaching, since uriVL is now used for programming assignments in URI's CSC583 Computer Vision course.  One consequence is that some operators tend to be broken down into several classes mostly for didactic reasons (this is for example the reason for the existence of the NonMaximumSupressor and HysteresisThresholder classes, which somehow escaped from the Canny edege detection operator).  Another consequence is that students will improve or even add support for their favorite platform because they want to do their assignments on their laptop.</p><p>Generally we have tried to use inheritance as much as possible, using as few root classes as possible.  For example, all images and vector fields, and most image features derive from the root class DrawableObject2D.  Similarly, all operators that apply to an image to produce another image derive from the ImageOperator class.  This ensures that all our operators tend to have the same interface and semantics (and quirks) throughout the library.</p><p>Another important aspect of the library is that we would like to make it possible for developers to choose which third-party components to use for image and video I/O, numerical computations, etc. (for example for licensing reasons). We are slowly putting into place the hooks to achieve that goal, and of adding support for other library and frameworks.</p><p>Finally, every time we develop a new family of classes, we develop a small demonstration application to showcase the use and capability of the classes.  In fact, typically the demo starts as the test/debugging application for the class.  It is one of my pet peeves that too many otherwise cool SDKs out there provide too few demo applications, and that these demos are often too complex (want to show too much) and often buggy.  My favorite  "bad demos" SDK is the QuickTime SDK (home of the "this is just a hack, don't to it that way" code samples).  In fact, because we felt that uriVL-specific code tended to be burried insidethe glut GUI code needed to show the results of operations, we have started developing GUI-less, "terminal" versions of the demos that only write results to a file.</p><h3>1.3 Platforms supported</h3><p>Currently the library supports Mac OS X, and Windows XP and 7, using their native development tools (Xcode for the Mac andVisual Studio for Windows).</p><p>We also support Linux (minus live video inputat this point) through the use of CMake cross-platform make scripts.  These scripts also work for Mac OS X (using gcc) and Windows (using either Visual Studio or MinGW).</p><h3>1.4 Performance</h3><p>As stated earlier, so far we have generally favored modularity over performance, mostly for didactic reasons.  This is not to say that we don't try to to write efficient code for each of the individual modules, but we have not done any extensive profiling of the library.  In particular, you will notice that we don't use explicit inlining at all.  The main reason for that is my (jyh) intense dislike of including source files in the .h header files.  Hopefully I'll eventually see the light and convert to it in the future.</p><h2>2. Development History and Contributors</h2><h3>2.1 Brief history</h3><p>uriVL was officially started as a project in 2003 by Jean-Yves Herv&#233;(jyh) and his Computer Science graduate students at the University of RhodeIsland's Department of Computer Science and Statistics.  Even though 2003 wasthe official launching year, development had started a couple of yearsearlier, in a less systematic and organized fashion, with a few separateprojects. In fact, some code in this library even dates from jyh's earlierposition at &#201;cole Polytechnique de Montr&#233;al (Groupe deRecherche en Perception et Robotique).  Work on uriVL is now mostly drivenby the projects and contracts of URI's 3D Group for InteractiveVisualization created and co-lead by jyh since June 2004.</p><h3>2.2 Main milestones</h3><p>The main milestones in the development of uriVL have been</p><ul>        <li>1995-1999 (Montr&#233;al): color-based segmentation,    tracking.</li>        <li>2001-2002: Single huge <tt>RasterImage</tt> class and first design    of the library.</li>        <li>2004: Redesign with multiple <tt>RasterImage</tt> subclasses.</li>        <li>2007: Linux compatibility and "generic" (QuickTime-independent),    version of the library;  unified uriVL namespace.</li>        <li>2008: Live video grabbing (finally) operational again.</li>        <li>2009: Start of the transition to QuickTimeX and QTkit for the Mac 	OS X implementation.</li>		<li>2010: Integration of uriVisionLib with the Unity3D game engine 	(not added to the public repository yet).</li>		<li>2011: Cooperation of uriVisionLib with libraries supporting  	Xbox360 Kinect devices (not added to the public repository yet).</li>	    </ul><h3>2.3 Contributors</h3><p>All contributors are listed more or less by order of entry in action (jyh is a contributor from beginning to present). Particularly significant contributors' names are in boldface.</p><h4>Prehistory (Montr&#233;al days)</h4><ul>        <li><b>Christian Zanardi:</b> video capture (buffer ring), real-time    tracking,</li>        <li><b>Djibril Ndiaye:</b> thresholding, blob detection, real-time tracking    (Kalman filter),</li>        <li><b>Fabienne Lathuili&#232;re:</b> color thresholding, pose estimation,    real-time tracking,</li>        <li>Laurence Rafin: target detection,</li>        <li>Cathy Laporte: line detection,</li>        <li>Antoine Michaud: pose estimation,</li>        <li><b>Claude Duchesne:</b> stereo matching, registration,     interposition for AR.</li>        <li>Simon Drouin: Calibration.</li>    </ul><h4>Early "URI Vision Library" (single <tt>RasterImage</tt> class)</h4><ul>        <li><b>Jinjing Hu:</b> movie player, color-based thresholding, edge    detection.</li>        <li>Brian Mullen: video grabbing, line detection, meshes.</li>        <li>Marc Schraffenberger: video capture, cvs repository.</li>        <li>Baikang Pei: active contours.</li>        <li>Jingjing Liu: stereo matching.</li>    </ul><h4> Current uriVL (multiple <tt>RasterImage</tt> subclasses)</h4><ul>        <li>Fang Han: <tt>Blob</tt> class, virtual objects (AR).</li>        <li>Clifford Manzanillo: active contours.</li>        <li>Joshua Sawyer (REU intern): edge detection, pose estimation, numerical routines,    tracking.</li>        <li><b>Meng Wan</b>: pattern matching, tracking, target detection, blob    class recoding</li>        <li>Mike Bonnell (REU intern): warping mosaic.</li>        <li><b>Johan Attali:</b> Visual Studio port, Xcode port.</li>        <li><b>Christian Convey:</b> First Linux port and "generic" version,    cmake script, massive bug and warning elimination.</li>        <li><b>Ian Lonngren:</b> Linux port, Eclipse integration, libquicktime    support, blob tracking.</li>        <li>Bryan Jones (REU intern): blob tracking, contour extraction.</li>        <li><b>Chris T. S. Allen:</b> Target detection,     pose estimation, tracking, Visual port, Linux port, revised cmake     script, general design of the SDK.</li>        <li>Frances Le (REU intern): blob tracking and contour interpretation.</li>		<li>Xiaolong Zheng: elevation map, depth map, range map classes.</li>			<li>Charles Morace: Work with Kinect, Image R/W re-tooling.</li>			<li><b>Lewis Collier:</b> FreeImage port, VisualStudio support.</li>		</ul><h3>2.4  Funding</h3><p>Development of uriVL was made possible by funding from several institutions or foundations, and development contracts for the 3D Group.  All of these projects used uriVL and in turn contributed back new classes and functionalities.</p><ul>    <li>National Science Foundation: "Modeling and Simulation of     Pedestrian Emergency Situations" [2003-2006].</li>        <li>National Science Foundation, Research Experience for Undergraduates    (CNS-0353786): "Research Experience for yoU, an REU Site for     Graphics Research in Rhode Island" [2004-2010].</li>        <li>National Institutes of Health: "RI BRIN" [2001-2004].</li>        <li>University of Rhode Island Foundation: "3D Group for Interactive     Visualization, a URI Partnership" [2004-2007].</li>        <li>Champlin Foundations: "Advanced 3D Graphics laboratory:  The Next     Phase" [2005].</li>        <li>Raytheon: "Synthetic Scene Fullfilment" [2006].</li>        <li>Purvis Systems Inc. (DoD STTR Phase I subcontract): "Portable Interactive 3D Virtual Reality     (PI3D VR) Training System" [2007-2008].</li>		<li>Trex Entreprises (DoD subcontract): "Enhanced Driver Situational 	Awareness System" [2011-2012].</li></ul><p><br></br></p><hr></hr><p><a href="http://validator.w3.org/"><img style="border:0;width:88px;height:31px"src="http://www.w3.org/Icons/valid-xhtml11" alt="Valid XHTML 1.1" /></a><a href="http://jigsaw.w3.org/css-validator/">        <img style="border:0;width:88px;height:31px"            src="http://jigsaw.w3.org/css-validator/images/vcss"            alt="Valid CSS!" /></a></p></body></html>